---
name: Deploy
on:
  push:
    branches:
      - main
    tags:
      - '*'
permissions:
  id-token: write
  contents: read

jobs:
  publish-docker-image:
    name: Publish Docker image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{steps.image-tag.outputs.image_tag}}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubAction
          role-session-name: GitHubActions
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Generate Image Tag
        id: image-tag
        env:
          GIT_SHA: ${{ github.sha }}
        run: |
          IMAGE_TAG=${GIT_SHA::7}
          echo "image_tag=${IMAGE_TAG}" >> "$GITHUB_OUTPUT"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push to AWS ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: hello-world
          IMAGE_TAG: ${{ steps.image-tag.outputs.image_tag }}
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:src"
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  format:
    name: Terraform format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/GithubAction
      - name: Format
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: 1.8.5
          tg_version: 0.59.6
          tg_dir: infra/accounts/dev/hello-world
          tg_command: fmt -check -diff

  validate:
    name: Terraform validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/GithubAction
      - name: Validate
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: 1.8.5
          tg_version: 0.59.6
          tg_dir: infra/accounts/dev/hello-world
          tg_command: validate

  plan:
    needs:
      - format
      - validate
      - publish-docker-image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ needs.publish-docker-image.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/GithubAction
      - name: Plan
        env:
          RELEASE_VERSION: ${{ needs.publish-docker-image.outputs.image_tag }}
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: 1.8.5
          tg_version: 0.59.6
          tg_dir: infra/accounts/dev/hello-world
          tg_command: plan -var release_version=${{ env.RELEASE_VERSION }}

  apply:
    needs: plan
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/GithubAction
      - name: Apply
        env:
          RELEASE_VERSION: ${{ needs.plan.outputs.image_tag }}
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: 1.8.5
          tg_version: 0.59.6
          tg_dir: infra/accounts/dev/hello-world
          tg_command: apply -var=release_version=$RELEASE_VERSION -auto-approve
